import 'package:crack_it/Widget/DescriptionTextWidget.dart';
import 'package:flutter/material.dart';

class AnswerTab extends StatefulWidget {
  @override
  _AnswerTabState createState() => _AnswerTabState();
}

class _AnswerTabState extends State<AnswerTab> {
   List answer = [
      "Preparation for GATE 2020 computer science. If you are self-studying for GATE then you can create a disciplined plan to complete it successfully. Many who are trying it for the first time shall feel it quite intimidating. There is a way out of this confusion and that is what this post is about. Preparing for GATE without coaching and devoting only on self-study gives you absolute control over your schedules, consistency and most importantly time. Here are some GATE Preparations tips and how to create a fool-proof GATE self-study plan If you are sincere then you will plan all the above three efficiently. Before that let's see what are the core factors required here. Here are some core factors while Preparing for GATE. Understanding the GATE syllabusCollect important information and resources Begin your preparation with dedication Make proper revision notes Practice tests and Quizzes Solve the papers from the previous year Study only high quality and relevant books Use online quizzes and tests to check your performance priorPlan For best results, your GATE self-study plan must be scheduled at least before four months of the exam. Every paper covers more than 10 subjects in GATE and so one or two months is not sufficient. If you only allow one or two months then let me say you will never be able to figure out how to study for GATE and complete the entire portion and it is practically quite impossible. Prepare for Mathematics and General Aptitude on the same level of Technical.Remember to complete Mathematics and General Aptitude. These carry a 30% ratio of total marks. Previous years papers shall guide you to analyze GATE exam but not to success. You have to do more study other than in previous years papers.You have to get an overall idea of the list of gate papers you are attending",
     "Knowing that the first stable release of Flutter took place on March 9, 2018, it’s too early to say anything. Imho, whether or not Flutter will succeed depends on its ability to compete with React Native. Now, comparing Flutter to React Native, the latter looks like a better option right now: As of Q1 2018, Flutter has only one newsworthy application in its portfolio (the Hamilton app), and users say it feels “jittery” on iPhone X. In the meantime, the React Native Showcase features apps like Facebook, Instagram, Skype, Bloomberg, Walmart, Airbnb, etc. And in most cases, you wouldn’t tell these apps have parts that aren’t ‘true native’ (well, maybe with the exception of Skype and Facebook). Also, Flutter’s Cupertino library is too limiting. There’s only 14 components, compared to 35+ elements in the Material library. I hope iOS will get more attention in the future (because brands prioritize iOS over Android). When it launched in 2015, React Native demonstrated a stronger focus on iOS, which contributed to the adoption of the technology. Besides, people express different opinions on the implementation of UI components in Flutter. The framework has replicas of iOS/Android components instead of OS native, the same model that Xamarin used. Knowing that Xamarin didn’t prove wildly successful, this model might be suboptimal. The experience of our company with React Native proved that wiring into native components via a JavaScript bridge gives you a look and feel that’s really closer to a true native experience. Still, Flutter’s implementation of UI components might be superior to previous implementations of the same model — it’s just too early to judge. Finally, Dart, the underlying programming language of Flutter, has literally no adoption outside of Google. As a result, finding skilled Dart developers for hire will be a challenge in 2018. Now, compare this situation to the ginormous talent pool of JavaScript, the most popular language on StackOverflow in 2018. That said, Flutter has several strong points: Dart is faster than JavaScript, and in Flutter, Dart code is compiled directly to the ARM code. Dart has great documentation. The development of many components and hardware API in RN is community-driven whereas in Flutter, more functionality is the responsibility of the core development team. Dart demonstrates a stronger focus on fully-custom UIs, which might be great for its adoption in “branded apps”",
     "I'm going to assume that I am explaining this to a total non-techie, so pardon me if I go into things that are a bit too rudimentary. Are you familiar with Javascript? In case you're not, it's a web-based scripting language that's primarily used to manipulate the HTML of a page. So using Javascript, you can manipulate tables, divs, fonts, etc. to do things using traditional programming functionality. Javascript is known as a client-side language, and what this means is that the changes effected to a page through JS are seen only by you, the client. In other words, lets say you click on a button, and that button executes a Javascript command which changes the background colour of the website blue. That change in blue will only be seen by you, not by anyone else, and it will go away the moment you refresh. Why? Because Javascript interacts only with you, the client, and has no interaction with the server which actually hosts the background colour. Its usage are restricted to the page you are currently viewing, and your individual interactions with it. This is known generally as working on the front end. On the other hand, you've got a language like PHP which interacts directly with a server. So in this case, clicking a button could execute a PHP script which actually goes into the server itself and changes the background color. Now the background colour has actually been changed on the back-end, and everyone who visits the website will see the changed background color. This is known as server-side scripting or the back end. PHP cannot directly manipulate the HTML on the page on a client-side basis. Here's an example to illustrate the concept. Type this into your browser window (it won't do anything crazy, don't worry): javascript:document.getElementsByTagName.style.backgroundColor = ;void(0); Your page should now be red. This isn't a permanent change, and it only happens to you -- it'll go away on refresh. That's what Javacript does -- it changes/serves the stuff on your screen. Now compare that to, say, changing your password... that makes a permanent change in the backend. Node.js, in the simplest most basic terms, is a framework to develop server-side applications using the JavaScript language. Its usage are effectively limited to the advantages of the programming language JavaScript over alternative methodologies. tl;dr - Node.js is effectively a server-side implementation of JavaScript. It allows you to, in a very nifty way, write the backend of the application in JavaScript. I hope that helped." ,
     "Don’t prepare yourself to become a software engineer at Google.  Instead prepare yourself to be a great software developer in 2017. Google will find you on the way and ask for a ride.  Here is a simple 7 step course of action that will have not only the doors at Google open to you, but everywhere else.  1. Learn to code  Software engineers at Google write software so it follows that if you want to be one, you should be able to code and do it really well.  Depending on your preference, you could either purchase a few of the “OReilly Teach Yourself (insert your language here) in 24 Hours” series of books and start learning.  Alternatively you could jump on an online course on platforms like Udemy and get started.  2. Network  You can be a good developer by enclosing yourself in your cubicle and coding your way to success.  But if you really want to be a great developer, you need to bring in other people to help you make it happen.  It is the connections that you make with other senior developers that will open more doors for you.  3. Build a Portfolio  Nobody wants to hire a mediocre engineer.  So in order to be able to get a chance even for an interview at companies like Google you need to have a strong show of credibility that you can build software.  And the best credibility is to show that you have done it before.  There are various ways you could build a portfolio to show your coding skills  Take on freelance projects and get started from there Start your own pet software project and put your everything into it Contribute to open source projects that will give you exposure 4. Get Recommendations  Well, somebody needs to know what you are doing.  Without someone to put up a strong word for you, even if you are a rockstar coder, some doors will just remain closed to you. So you really need strong recommendations or it’s a vote of no confidence.  When I was getting started in my software development career it was thrice as easy for me to get new clients when I showed recommendations from previous clients than whe" ,
     "Don’t prepare yourself to become a software engineer at Google.  Instead prepare yourself to be a great software developer in 2017. Google will find you on the way and ask for a ride.  Here is a simple 7 step course of action that will have not only the doors at Google open to you, but everywhere else.  1. Learn to code  Software engineers at Google write software so it follows that if you want to be one, you should be able to code and do it really well.  Depending on your preference, you could either purchase a few of the “OReilly Teach Yourself (insert your language here) in 24 Hours” series of books and start learning.  Alternatively you could jump on an online course on platforms like Udemy and get started.  2. Network  You can be a good developer by enclosing yourself in your cubicle and coding your way to success.  But if you really want to be a great developer, you need to bring in other people to help you make it happen.  It is the connections that you make with other senior developers that will open more doors for you.  3. Build a Portfolio  Nobody wants to hire a mediocre engineer.  So in order to be able to get a chance even for an interview at companies like Google you need to have a strong show of credibility that you can build software.  And the best credibility is to show that you have done it before.  There are various ways you could build a portfolio to show your coding skills  Take on freelance projects and get started from there Start your own pet software project and put your everything into it Contribute to open source projects that will give you exposure 4. Get Recommendations  Well, somebody needs to know what you are doing.  Without someone to put up a strong word for you, even if you are a rockstar coder, some doors will just remain closed to you. So you really need strong recommendations or it’s a vote of no confidence.  When I was getting started in my software development career it was thrice as easy for me to get new clients when I showed recommendations from previous clients than whe" ,
   ];

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      itemCount: answer.length,
      itemBuilder: (BuildContext context, int index) {
      return Padding(
        padding: const EdgeInsets.symmetric(vertical: 6.0),
        child: Card(
          child: DescriptionTextWidget(
            text: answer[index],   
          ), 
        ),
      );
     },
    );
  }
}